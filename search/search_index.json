{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Errbot \ud83e\udd16","text":"<p>A Dicord chatbot that is easy to deploy and build upon!</p> <p>This project uses errbot and Docker to quickly launch your own chatbot in a container.</p> <p>The goal of this project is to make it as easy as possible to launch a minimal, working chatbot.</p> <p>Note: This repo is a fork of my other project errbot-launchpad - errbot-launchpad is a way more basic version of this project. This project that you are currently reading about \ud83d\udc40 is packed full of features and chatbot command that are ready to use out of the box! It is a work in progress though so beware of bugs!</p> <p>Looking for the bot commands documentation?</p> <p>Check it out here!</p>"},{"location":"#quickstart","title":"Quickstart \u2b50","text":"<p>Want to get going quick? Run the following commands to bring up a CLI to interact with <code>errbot</code> locally:</p> <ol> <li><code>git clone git@github.com:GrantBirki/errbot.git</code></li> <li><code>cd errbot</code></li> <li><code>make local</code></li> </ol>"},{"location":"#development-guide","title":"Development Guide","text":"<p>Check out the development guide in this repo for all the info you will need to develop, test, and build your bot!</p> <p>In this guide you will find details about how the bot works, and how you can create your own new chatbot commands.</p> <p>Just make sure to walk through the setup section before you start!</p>"},{"location":"#bot-invite-link","title":"Bot Invite Link \ud83d\udd17","text":"<p>Click here to invite errbot to your Discord server!</p> <p>Note: The public version of errbot is no longer available. If you wish to use errbot, you must self host it on your own</p>"},{"location":"#community-discord","title":"Community Discord \ud83d\udcac","text":"<p>If you need help with development, have a question, new feature, or just want to test out the bot, you can join the errbot community Discord</p>"},{"location":"#mkdocs-documentation","title":"Mkdocs Documentation \ud83d\udcda","text":"<p>Docs about docs? WhOa sO mEtA</p> <p>Do you want to build and read the documentation locally? Perhaps you have a suggestion and want to visualize how it will look when deployed with GitHub Pages?</p> <p>To view and serve a local version of the Mkdocs documentation for this project, run the following command:</p> <pre><code>$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.17 seconds\nINFO     -  [12:61:00] Serving on http://127.0.0.1:8000/\n</code></pre>"},{"location":"#whats-next","title":"What's next?","text":"<p>Continue on to the setup section to get your environment setup and ready to build!</p>"},{"location":"commands/","title":"Commands","text":"<p>The following commands are all available via the chatbot:</p> <p>Table Key:</p> <ul> <li>Command: Self explanatory, the command to be executed by the chatbot</li> <li>Example: An example of the command and how to use it</li> <li>Admin Only: True/False - If the command is only available to bot admins</li> <li>Description: A brief description of the command</li> <li>Availability: Where the command is available. Possible options include:<ul> <li>\ud83c\udf0e - Globally available everywhere the bot is present</li> <li>\ud83d\udd12 - Locked to certain servers / chatrooms (not publically available)</li> <li>\ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb - Locked to the bot admins</li> <li>\u274c - Disabled</li> </ul> </li> </ul> Command Example Description Availability <code>.help</code> - The help command to view all available commands \ud83c\udf0e <code>.docs</code> - View the public documenation link for the bot \ud83c\udf0e <code>.about</code> - View information data about the chatbot \ud83c\udf0e <code>.crypto</code> <code>.crypto btc</code> Get the current price of a crypto currency \ud83c\udf0e <code>.load</code> - Get the system load \ud83c\udf0e <code>.ping</code> - Check if the bot is online \ud83c\udf0e <code>.version</code> - See what version of the bot is running \ud83c\udf0e <code>.random fact</code> - Get a random fun fact \ud83c\udf0e <code>.status</code> - View the status of the bot \ud83c\udf0e <code>.status gc</code> - View the garbage collection status of the bot \ud83c\udf0e <code>.status plugins</code> - View the status of the bot plugins \ud83c\udf0e <code>.stats</code> - Get the total stats for all the bot commands that have been used \ud83c\udf0e <code>.uptime</code> - View the bots \"uptime\" \ud83c\udf0e <code>.weather</code> <code>.weather Denver</code> Get the current weather for a city \ud83c\udf0e <code>.covid</code> <code>.covid --region global</code> Get covid statistics for a two letter country code <code>--region us|it|etc</code> \ud83c\udf0e <code>.insult</code> <code>.insult @errbot</code> Insult a given user. Great with friends! \ud83c\udf0e <code>.add me to league watcher</code> <code>.add me to league watcher &lt;summoner_name&gt;</code> Add a summoner to the League watcher to \"watch\" for their games and post messages in the #league channel \ud83d\udd12 <code>.remove me from league watcher</code> - Remove your summoner from the League watcher \ud83d\udd12 <code>.last match for</code> <code>.last match for &lt;summoner_name&gt;</code> Get the last League match data for a given summoner \ud83c\udf0e <code>.lmf</code> <code>.lmf &lt;summoner_name&gt;</code> Get the last League match data for a given summoner (An alias for <code>.last match for</code>) \ud83c\udf0e <code>.league disable</code> - Disable the League watcher \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.league enable</code> - Enable the League watcher \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.league streak</code> - View your current league win/loss streak \ud83d\udd12 <code>.add to league watcher</code> <code>.add to league watcher --summoner birki --discord birki#0001 --guild 12345</code> Admin command to add a summoner + Discord handle combo to a given guild for the League watcher \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.remove from league watcher</code> <code>.remove from league watcher --discord &lt;discord_guild_id&gt; --summoner &lt;summoner_name&gt;</code> Admin command to remove a summoner in a specific discord guild from the league watcher \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.view my league watcher data</code> <code>.view my league watcher data</code> View your league watcher data \ud83d\udd12 <code>.loud</code> <code>.loud rickroll.mp3</code> Play a very loud sound from the sounds folder on the bot \ud83d\udd12 <code>.loud list</code> - List all the mp3 sound files which can be used by the <code>.loud</code> command \ud83c\udf0e <code>.loud random</code> - Play a random sound from the sounds folder on the bot \ud83c\udf0e <code>.play</code> <code>.play &lt;youtube_url | soundcloud_url&gt;</code> Play a song, or sound from YouTube or Soundcloud - Optionally use <code>--queue &lt;number&gt;</code> to select the queue position to play the song \ud83d\udd12 <code>.play help</code> - View a detailed and pretty help command for <code>.play</code> \ud83d\udd12 <code>.play queue</code> - See what is in the <code>.play</code> queue \ud83d\udd12 <code>.play stats</code> - See the all time stats for the <code>.play</code> command in your server \ud83d\udd12 <code>.skip</code> - Skip the current song playing / at the top of the queue \ud83d\udd12 <code>.stop</code> - Stop the current song and nuke the whole <code>.play</code> queue \ud83d\udd12 <code>.scdl</code> <code>.scdl &lt;soundcloud_song_url&gt;</code> Uses scdl to download any song from soundcloud \ud83d\udd12 <code>.rem</code> <code>.rem &lt;key&gt; is &lt;value&gt;</code> Have the bot remember something - Inspired by hubot under the MIT license \ud83c\udf0e <code>.forget</code> <code>.forget &lt;key&gt;</code> Make the bot forget something that is being remembered \ud83c\udf0e <code>.rem search</code> <code>.rem search &lt;key&gt;</code> Search all things being remembered \ud83c\udf0e <code>.remember</code> <code>.rememeber &lt;key&gt; is &lt;value&gt;</code> The \"longform\" version of the <code>.rem</code> command \ud83c\udf0e <code>.tts</code> <code>.tts hello world! I will be read over text to speech</code> Read a text message over text to speech in a voice channel (that you are connected to) \ud83d\udd12 <code>.echo</code> <code>.echo hello</code> A simple command to echo back a message (Like the Linux \"echo\" binary) \ud83c\udf0e <code>.history</code> - View the past few commands (history) that have been used by the bot \ud83c\udf0e <code>.log tail</code> - Tail / View the bots latest log messages that have been written \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.reboot</code> - Reboots the bot \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.users</code> - See a total count of all the users that 'could' interact with the bot in all servers \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.servers</code> - See a list of all active servers the bot is in \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.ban</code> <code>.ban user#1234</code> Ban a user from interacting with the bot \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.banned users</code> - View all the users that have been banned \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.unban</code> <code>.unban user#1234</code> Remove a ban for a given user \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.ban</code> <code>.ban server 1234567890</code> Ban an entire server from interacting with the bot \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.banned servers</code> - View all the servers that have been banned \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.unban server</code> <code>.unban server 1234567890</code> Remove a ban for a given server \ud83d\udd12\ud83d\udc68\u200d\ud83d\udcbb <code>.render test</code> - Render a sample message with errbot to see how the chat service handles it \ud83c\udf0e <code>.whoami</code> - Return a block of data about who the bot thinks you are \ud83c\udf0e <code>.wallstreetbets</code> - View the top trending stonks from /r/wallstreetbets \ud83c\udf0e <code>.sparkle</code> <code>.sparkle @username for being awesome</code> Sparkle a user to show your appreciation! (optionally provide a reason for the sparkling) - Inspired by pwn \ud83c\udf0e <code>.show sparkles</code> <code>.show sparkes</code> - <code>.show sparkles for @username</code> View the sparkles (and their reasons) for yourself or another user - Inspired by pwn \ud83c\udf0e <code>.down</code> <code>.down twitter</code> Get a DownDetector graph and the status for a given service \ud83c\udf0e <code>.qrcode</code> <code>.qrcode github.com</code> Create a QR code for any url, text, etc \ud83c\udf0e <code>.eft help</code> - Help message for all <code>.eft</code> commands \ud83c\udf0e <code>.eft</code> <code>.eft clock</code> Get an Escape from Tarkov item and its value \ud83c\udf0e <code>.eft ammo</code> <code>.eft ammo 7.62x39mm</code> Get information about an ammo type \ud83c\udf0e <code>.eft ammo help</code> - Get information about the ammo types that can be used with the <code>.eft ammo</code> command \ud83c\udf0e <code>.eft status</code> <code>.eft status</code> - <code>.eft status --messages</code> Get the current status of the Escape from Tarkov servers \ud83c\udf0e <code>.eft map</code> <code>.eft map shoreline</code> Get an image of a map for a given Tarkov location \ud83c\udf0e <code>.eft map help</code> - Get information about the maps that can be used with the <code>.eft map</code> command \ud83c\udf0e <code>.eft time</code> - Get the current time in Tarkov \ud83c\udf0e <code>.eft track</code> <code>.eft track --item &lt;item&gt; --threshold &lt;threshold&gt; --channel &lt;channel&gt;</code> Track an item for price changes in Escape from Tarkov - Note: Make sure to wrap <code>--item \"search with spaces\"</code> in quotes if it contains spaces \ud83c\udf0e <code>.eft untrack</code> <code>.eft untrack &lt;item&gt;</code> Stop tracking a tracked item for price changes in Escape from Tarkov \ud83c\udf0e <code>.eft track help</code> - Get the detailed help command for the Escape from Tarkov item tracker \ud83c\udf0e <code>.ip</code> <code>ip 123.123.123.123</code> Get the geolocation of a public IP address \ud83d\udd12 <p>Note: <code>.</code> is the bot prefix to invoke the bot in production and <code>!</code> is often used for development</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This section will walk you through configuring your bot to make it uniquely yours!</p>"},{"location":"configuration/#the-mighty-env-files","title":"The mighty .env files","text":"<p>All configuration to the bot is done through environment variables. This is done to make local dev easily mirror production and be configured in the same way.</p> <p>There are two kinds of variables:</p> <ul> <li>Sensitive environment variables</li> <li>Everything else</li> </ul> <p>These variables are split out into their own respective <code>.env</code> files</p> <ul> <li><code>config.env</code> - Environment variables related to the overall configuration of the bot. This file can and should be committed</li> <li><code>creds.env</code> - Sensitive environement variables containing secrets, API keys, tokens, etc. This file should absolutely not be committed ever</li> </ul>"},{"location":"configuration/#configenv","title":"config.env","text":"<p>This file has a lot of comments describing each option so I won't go into too many details here. In this file you can make general configuration changes to the bot to alter how it behaves. Below are a few examples:</p> <ul> <li><code>BOT_PREFIX='!'</code> - This allows you to change the character that you invoke your bot with. For example, you could have it be <code>.</code> instead of a <code>!</code> (I like the <code>.</code>) -&gt; <code>.uptime</code></li> <li><code>BOT_HOME_CHANNEL</code> - The \"home channel\" of the bot. Can be useful to have this set if you have a cron that posts messages at a certain time to a certain channel, like weather updates</li> <li><code>BOT_ADMINS</code> - Set the \"admin\" users of the bot. Can be used in combination with the <code>@botcmd(admin_only=True)</code> decorator to prevent non-admins from using a certain command</li> </ul>"},{"location":"configuration/#credsenv","title":"creds.env","text":"<p>\u26a0\ufe0f Once again do not ever commit this file to your version control system!</p> <p>This file contains secrets and credentials that your bot needs to run. The only credential that is needed to run the bot is the <code>CHAT_SERVICE_TOKEN</code> which is what you use to connect to your desired chat service (Discord, Slack, etc). All the rest are optional! Examples below:</p> <p>Required:</p> <ul> <li><code>CHAT_SERVICE_TOKEN='&lt;token&gt;'</code> - The token to connect your bot to its chat service</li> </ul> <p>Optional Examples:</p> <ul> <li><code>AWS_ACCESS_KEY_ID='&lt;token&gt;'</code> &amp; <code>AWS_SECRET_ACCESS_KEY='&lt;token&gt;'</code> - AWS tokens if you are using DynamoDB for state persistence</li> <li><code>RIOT_TOKEN</code> - An API token from RIOT to enable the League of Legends gameplay watcher plugin</li> <li><code>SPOTIFY_CLIENT_ID='&lt;token&gt;'</code> &amp; <code>SPOTIFY_CLIENT_SECRET='&lt;token&gt;'</code> - Spotify tokens to enable extra Spotify lookups on songs played with the <code>.play</code> command</li> <li><code>SENTRY='https://&lt;id&gt;@&lt;id&gt;.ingest.sentry.io/&lt;id&gt;'</code> - Sentry.io url endpoint for sending exception events for your bot (I love this personally)</li> </ul> <p>Check out the <code>creds.env.example</code> file to see more examples of this file's contents</p> <p>A note on optional credentials as seen above:</p> <p>A few of the tokens listed above are optional and enable extra features to the bot when provided as environment variables. You can see more information on these in the configuration table below.</p>"},{"location":"configuration/#configuration-table","title":"Configuration Table","text":"<p>Now that you have a general understanding about how environment variables are used to configure the bot, let's look at a table of the configuration options that are available:</p> <p>config.env:</p> ENV VAR Value Required / Optional Description <code>BOT_NAME</code> Any alpha-numeric character Required A unique identifier that will be used in the logs for identifying your bot. This value should be unique if you have multiple bots running in the same environment <code>BACKEND</code> Discord / Slack / etc Required Set the desired chat backend for the bot <code>BOT_PREFIX</code> Any alpha-numeric character Required Set the character prefix used to invoke the bot (<code>.</code> is suggested) <code>BOT_HOME_CHANNEL</code> Any string related to a text channel name Optional Set a home channel for the bot as a default. Example, posting messages to a channel on a schedule like weather updates <code>IMAGE_TAG</code> String Optional An image tag / version number to use to identify the version of the bot that is running <code>BOT_ADMINS</code> String (ex: <code>Username#0001</code>) Optional The username in the chat-service provided format. Examples: <code>Username#0001</code> for Discord and <code>@user.name</code> for Slack <code>BOT_EXTRA_BACKEND_DIR</code> <code>/app/backend/err-backend-discord</code> Depends This variable is optional if you are not using a backend that requires it. If you are using a backend like Discord, then this is required <code>BOT_STATUS_MESSAGE</code> String Optional Certain chat services like Discord allow you to have a status message next to your bot's name. This variable allows you to provide that <code>DISABLE_LEAGUE_CRON</code> <code>True</code> Optional A variable used to disable or enable the \"cron\" like functionality for the <code>.league</code> plugin which posts match results at a set interval (like a cron job) <code>DOCS_URL</code> String Optional A link that will be provided to users when the <code>.docs</code> command is invoked <code>LOCALSTACK</code> <code>http://localstack:4566</code> Required (locally) If you are using LocalStack (you are by default) then this variable provides the URL to the localstack endpoint when testing locally with docker-compose <code>SENTRY_DISABLED</code> <code>True</code> Optional An optional variable that can be provided to manually disable the Sentry.io extension <p>creds.env:</p> ENV VAR Value Required / Optional Description <code>CHAT_SERVICE_TOKEN</code> String Required The token used to authenticate to your desired chat service <code>AWS_ACCESS_KEY_ID</code> String Optional If you are using AWS DynamoDB for persistence, then you can provide this for authentication <code>AWS_SECRET_ACCESS_KEY</code> String Optional If you are using AWS DynamoDB for persistence, then you can provide this for authentication <code>RIOT_TOKEN</code> String Optional Add your RIOT API token to enable the <code>.league</code> chat commands and features <code>GEOLOCATION_KEY</code> String Optional Add your abstractapi.com (for Geolocation) token to enable the <code>.ip</code> chat commands and features <code>SPOTIFY_CLIENT_ID</code> String Optional Add your Spotify API credentials to enable Spotify song detail lookups and URLs for the <code>.play</code> command <code>SPOTIFY_CLIENT_SECRET</code> String Optional Add your Spotify API credentials to enable Spotify song detail lookups and URLs for the <code>.play</code> command <code>SENTRY</code> Sentry DSN in the following format: <code>https://&lt;id&gt;@&lt;id&gt;.ingest.sentry.io/&lt;id&gt;</code> Optional Add your Sentry.io DSN in the URL format to enable logging exceptions to Sentry.io <p>Table Key Details:</p> <ul> <li><code>ENV VAR</code> - The variable name to be provided</li> <li><code>Value</code> - An example of the value(s) that can be provided</li> <li><code>Required / Optional</code> - Whether or not the variable is required or optional</li> <li><code>Description</code> - A description of what the variable is used for</li> </ul>"},{"location":"configuration/#what-about-production","title":"What About Production?","text":"<p>Related to this section is the deployment page</p> <p>How do we get these environment variables into our container when deploying to production you ask? Well that really depends on how you are deploying your container to production. I will provide a few options below to give you some ideas:</p> <p>For <code>config.env</code>:</p> <ul> <li>Apply your environment variables in your container definintion if you are using Kubernetes</li> <li>Bake your environment variables into your container when building the image (meh)</li> <li>Load the <code>config.env</code> file into the container or mount a volume with this file that the container has access to. Then read the file and populate the environment variables</li> <li>Store the variables in a remote config store and read them from there</li> </ul> <p>For <code>creds.env</code>:</p> <ul> <li>Use k8s secrets for when deploying to Kubernetes -&gt; <code>terraform/k8s/modules/containers/errbot/secret.yaml</code></li> <li>Use Hashicorp Vault to inject secrets from <code>creds.env</code></li> <li>Use an external service like AWS Secrets Manager and read from there</li> </ul>"},{"location":"configuration/#whats-next","title":"What's next?","text":"<p>Continue on to the development section to learn more about how to build your bot, add new commands, and more!</p>"},{"location":"deployment/","title":"Deployment","text":"<p>Note: This section is mostly for my own docs for this repo and its contributors. You can use it as a guide for your own fork of this project</p> <p>Deploying your changes to the prod instance of <code>errbot</code> is really easy.</p> <p>We will use the <code>.cat meow</code> example from the development section</p> <p>All you need to do is the following:</p> <ol> <li>Create a new branch <code>cat-meow-feature</code></li> <li>Commit your changes to the <code>cat-meow-feature</code> branch</li> <li>Push your changes</li> <li>Open up github.com/GrantBirki/errbot/pulls and create a new pull request</li> <li>Wait for CI to finish and for all checks to pass</li> <li>View your Terraform output and ensure it looks like it is doing what you want it to (ie: not destroying resources)</li> <li>Request review on your pull request and obtain an approval (@grantbirki or any other member)</li> <li>Merge your pull request and your change will be automatically deployed! \ud83d\ude80\u2728</li> <li>Run <code>.cat meow</code> in Discord to see your command in action \ud83d\udc08</li> </ol>"},{"location":"deployment/#tagging-a-release","title":"Tagging a Release \ud83c\udff7","text":"<p>Once you have deployed your changes via a merge, it is recommended to create a new release via a Git tag</p> <p>This can be easily accomplished by using the following helper script:</p> <pre><code>script/release\n</code></pre> <p>This will create a tag with the following format (vX.X.X) and push it to the remote repo</p> <p>If you changes are minor and do not require a release, you may skip this step</p> <p>Create release tags from the main branch</p>"},{"location":"deployment/#deploying-from-scratch-to-azure-with-github-actions","title":"Deploying from Scratch to Azure with GitHub Actions","text":"<p>This sections is mostly my own notes and for those who are deploying this project with GitHub Actions to Azure AKS</p> <p>If there are currently no resources deployed for this project you will need to follow the steps below to \"deploy from scratch\":</p> <ol> <li>Run the <code>make build</code> command from the root of this repo</li> <li>Once the local deploy is complete, login to your Azure account and go to the errbot ACR registry that was created</li> <li>Copy the ACR <code>username</code> and <code>password</code> and add it to GitHub Actions secrets</li> <li>Copy your <code>~/.kube/config</code> file and add it to GitHub Actions secrets</li> <li>You may now deploy the pipeline through GitHub Actions</li> </ol>"},{"location":"deployment/#whats-next","title":"What's next?","text":"<p>Continue on to the observability section to learn more about how to observe and monitor your bot's performance \ud83d\udd2d</p>"},{"location":"development/","title":"Development","text":"<p>Looking to add a feature, enchance an existing one, or contribute to this bot? You have come to the right place!</p> <p>The first step to contributing to this bot is getting your environment setup. This is covered on the main document under the setup section so make sure you have the <code>prerequisites</code> section checked off before continuing.</p>"},{"location":"development/#understanding-the-bot","title":"Understanding the Bot","text":"<p>Let's understand all the parts of the this repo so we are familiar before we begin</p>"},{"location":"development/#about-the-infrastructure","title":"About the Infrastructure","text":"<p>Here is a high level overview of this project and the software/infrastruce that run this bot:</p> <p>Core:</p> <ul> <li>This project uses errbot which is a Python based chatop/chatbot framework</li> <li><code>errbot</code> and all of its components are built using Docker to create a deployable image</li> <li>We use Terraform and GitHub actions to deploy the Docker image (from our CI/CD pipeline) to Azure AKS (Kubernetes)</li> <li>The Docker image runs in a container in Azure AKS and connects to Discord</li> <li>The bot then listens for commands and responds to them</li> <li>For any commands that require some form of \"state\" we use AWS DynamoDB to store information since containers are ephemeral by design - We use LocalStack to mock AWS when developing locally \ud83d\ude09</li> <li>We store any configuration as environment variables and secrets as k8s secrets which get injected into the container on boot</li> </ul>"},{"location":"development/#project-folderfile-information","title":"Project Folder/File Information","text":"<p>What is in each folder?</p> <ul> <li><code>.github/</code> - Mainly GitHub workflows for actions</li> <li><code>script/</code> - Maintenance and automation scripts for working with this project</li> <li><code>script/k8s/</code> - Kubernetes deployment scripts for local development</li> <li><code>script/localstack/</code> - Files and Dockerfiles related to building the localstack container for development</li> <li><code>template/</code> - Template / boilerplate code for new chatops commands</li> <li><code>terraform/</code> - Terraform code for deploying <code>errbot</code> resources</li> <li><code>terraform/aws</code> - AWS related resources</li> <li><code>terraform/k8s-cluster</code> - The core components of the <code>errbot</code> k8s cluster</li> <li><code>terraform/k8s</code> - The k8s resources, services, manifests, secrets, etc to get deployed on the <code>k8s-cluster</code></li> <li> <p><code>src/</code> - All the files, data, and configuration for <code>errbot</code> and its related services</p> </li> <li> <p><code>src/errbot/backend/</code> - Folder containing extra backend modules (Discord)</p> </li> <li><code>src/errbot/</code> - Folder containing all the extra / custom plugins for our chatop commands</li> <li><code>src/errbot/lib/</code> - Folder containing shared libraries for plugins</li> </ul> <p>What are these files?</p> <ul> <li><code>.gitignore</code> - Used for ignoring files from Git</li> <li><code>config.env</code> - Used for adding non-sensitive environment variables to your local instance of <code>errbot</code></li> <li><code>creds.env</code> - Used for adding sensitive environment variables to your local instance of <code>errbot</code></li> <li><code>docker-compose.yml</code> - Used for starting <code>errbot</code> locally with Docker-Compose</li> <li><code>Makefile</code> - Used to easily invoke scripts in this repo</li> <li><code>*.md</code> - Documentation!</li> </ul> <p>Okay, now let's get started!</p>"},{"location":"development/#running-the-bot-locally","title":"Running the Bot Locally \ud83e\udd16","text":"<p>This should look familiar from the setup section</p> <p>Let's create a local instance of <code>Errbot</code>:</p> <pre><code>$ make local\n[#] Starting local bot test environment\n[#] Killing old docker processes\ndocker-compose rm -fs\nStopping chatbot ... done\nGoing to remove chatbot\nRemoving chatbot ... done\n[#] Building docker containers\ndocker-compose build\nBuilding chatbot\n[+] Building 1.3s (22/22) FINISHED\n[#] TEST Container is now running!\n[#] Interact with me over the CLI prompt below\n\n[@local_admin \u27a1 @errbot] &gt;&gt;&gt;\n</code></pre> <p>You can now interact with <code>Errbot</code> from the command line!</p> <p>Type a command like <code>.help</code> to get an output of all the commands that are available</p> <p>So what exactly does <code>make local</code> do?</p> <ol> <li> <p><code>docker-compose rm -fs</code></p> <p>Removes and destroys any <code>errbot_chatbot</code> Docker containers (if running)</p> </li> <li> <p><code>docker-compose build</code></p> <p>Rebuilds the <code>errbot_chatbot</code> Docker container and bakes in any new changes you have made. The Docker build packages up components from the <code>src/errbot</code> directory</p> </li> <li> <p>Runs <code>docker run -it --rm --env-file config.env --env-file creds.env -e LOCAL_TESTING=True errbot_chatbot:latest</code> - Let's break this one down..</p> <ol> <li>This starts the <code>errbot_chatbot:latest</code> container in interactive mode (<code>-it</code>)</li> <li>Removes the container once you exit the CLI (<code>--rm</code>)</li> <li>Uses the <code>config.env</code> file to load non-sensitive environment variables (<code>--env-file config.env</code>)</li> <li>Uses the <code>creds.env</code> file to load sensitive environment variables (<code>--env-file creds.env</code>)</li> <li>Specifies the <code>LOCAL_TESTING=True</code> environment variable (<code>-e LOCAL_TESTING=True</code>) - Used in <code>app/config.py</code></li> <li>Pops open a CLI prompt when complete for you to interact and issues commands to test and develop <code>errbot</code></li> </ol> </li> </ol> <p>Okay, so we started up the bot, hooray! Now lets go over how to create a chatop command</p>"},{"location":"development/#creating-a-new-chatop-command","title":"Creating a new ChatOp Command \ud83d\udee0\ufe0f","text":"<p>Before we create a new chatop command, let's go over it a bit.</p>"},{"location":"development/#about-chatop-commands","title":"About ChatOp Commands","text":"<p>Click to expand each section and learn more about chatops</p> What is a chatop command? .help, .uptime, .whoami, .example are all examples of chatop commands  The first three commands listed above (.help, .uptime, .whoami) are builtin commands. This means that they come with the errbot framework.  The last command listed above (.example) is a plugin command. This means that it is a chatop command which we created for our own use! This guide will focus on plugins which are chatops commands that we write and bake into our chatbot.   Where are chatop commands stored?  They are stored in the src/errbot/plugins folder. Each chatop command is then stored in its own subfolder:  src/errbot/example What is the src/errbot/lib folder?  Good thing you asked! This is a special folder for storing shared/common libraries between chatop commands.  For example, let's say you had two chatop functions .send cat meme and .send dog meme. People were spamming memes too fast so you needed to rate limit both commands. You could add a shared rate_limit_memes() function in src/errbot/lib/common and then import that function into both your cat and dog chatops. Check out the src/errbot/lib folder to see examples in action   <p>Okay cool beans, now that we know a bit more about chatops commands, let's create a brand new one</p>"},{"location":"development/#creating-a-command","title":"Creating a command","text":"<p>At the root of this repo you will notice a <code>template</code> folder. This folder contains the bare minimum code to create a brand new chatop command. Since copying this file from the <code>template</code> folder to the <code>src/errbot/template</code> folder takes about 1 brain cell too many, there is a script to do it for you.</p> <p>Run the following command to copy the <code>template</code> folder into the plugin directory:</p> <pre><code>make command\n</code></pre> <p>Follow the prompts from this script and create a new command (maybe something like <code>.cat meow</code>)</p> Making a new command by hand (eww)  Enter the `src/errbot/template` folder and poke around the two files you see in there for a bit.  In order to make a new chatop command you just need to change a few lines to the new name of you function / functions.  Let's say we want to make a new chatop command that responds with some simple text like \"meow\" and it is invoked by typing `.cat meow`. To do so, make the following changes:  1. Change the name of the `src/errbot/template` folder:      `src/errbot/template` -&gt; `src/errbot/catmeow`  2. Change the name of the `src/errbot/template/template.plug` file:      `src/errbot/template/template.plug` -&gt; `src/errbot/template/catmeow.plug`  3. Change the name of the `src/errbot/template/template.py` file:      `src/errbot/template/template.py` -&gt; `src/errbot/template/catmeow.py`  4. Inside of the `src/errbot/template/template.plug` file change all occurrences of `Template` or `template` to `Catmeow` or `catmeow`:      Example: `Name = Template # Change me!` -&gt; `Name = Catmeow`      Example: `Module = template # Change me!` -&gt; `Module = catmeow`      &gt; Note the cases of T/t and C/c above  5. Inside of the `src/errbot/template/template.py` file change the class name:      `class Template(BotPlugin): # Change me!` -&gt; `class Catmeow(BotPlugin):`  6. Inside of the `src/errbot/template/template.py` file change the function name:      `def template(self, msg, args): # Change me! (function name)` -&gt; `def cat_meow(self, msg, args):`      &gt; Note: We use `_` (underscores) in function names to represent spaces in our command. `def cat_meow(...)` becomes `.cat meow` via the chatop  7. To make the `.cat meow` command return something, edit the return message:      `return 'Hello world, I am a template!'` -&gt; `return 'meow!'`   <p>Once you follow through all the prompts from the script, you should have a new folder in <code>src/errbot/plugins/&lt;new-command-name&gt;</code></p> <p>Open up the Python file in that directory to add some code. It will be a template for you to edit and bring your <code>.cat meow</code> command to life. I will include a snippet below of what it could look like:</p> <pre><code>\nfrom errbot import BotPlugin, botcmd\n\nclass CatMeow(BotPlugin):\n    \"\"\"A chat command that sends cat noises\"\"\"\n\n    @botcmd\n    def cat_meow(self, msg, args):\n        \"\"\"Makes a cat noise\"\"\"\n        return \"meeeeoowww\"\n</code></pre> <p>Let's break down what each line of the snippet above does:</p> <pre><code>from errbot import BotPlugin, botcmd\n# Imports the errbot plugins and decorators to make a function into a bot command\n</code></pre> <pre><code>class CatMeow(BotPlugin):\n# Creates a new class for all our Cat related bot commands.\n# A class can contain many or just a single bot command\n</code></pre> <pre><code>@botcmd # The mighty bot decorator that turns the function into a bot command!\ndef cat_meow(self, msg, args): # The bot command (more info below this code snippet)\n    \"\"\"Makes a cat noise\"\"\" # A docstring that can be viewed via the bot's 'help' command\n    return \"meeeeoowww\" # The String which the bot returns when invoked for this bot command\n</code></pre> <p>The Bot Command: In the snippet above, the line <code>def cat_meow(self, msg, args)</code> has a lot to unpack. This function has a decorator applied to it that turns it into a bot command. During run time, the <code>BOT_PREFIX</code> from the <code>config.env</code> file (in the root of this repo) get applied to the front of the function name and all <code>_</code> (underscores) become spaces. So <code>cat_meow</code> ultimately becomes <code>!cat meow</code> as a bot command for example. <code>self</code>, <code>msg</code>, and <code>args</code> are all required errbot params for this function to work. To see what attributes these objects contain I would suggest looking at <code>src/errbot/plugins/example/example.py</code> or taking a deeper looking into the official errbot documentation. Okay, that's enough of that.. let's start the bot and test out our new <code>.cat meow</code> command!</p> <p>To test, <code>cd</code> to the root of this repo and run <code>make local</code>.</p> <p>Your new plugin should be loaded and you can interact with it via the CLI:</p> <p>Note: I use <code>.</code> to invoke my bot but that is ultimately determined on what you have you <code>BOT_PREFIX</code> set to in the <code>config.env</code> file.</p> <pre><code>[@local_admin \u27a1 @errbot] &gt;&gt;&gt; .cat meow\n\nmeeeeoowww\n</code></pre>"},{"location":"development/#linting-your-code","title":"Linting your code","text":"<p>This section is specific to the <code>GrantBirki/errbot</code> repo for the CI/CD pipeline and to adhear to code linting standards in this repo</p> <p>In order for CI to pass, you must have properly linted code. Luckily, this is extremely easy to do and can be performed in a single command:</p> <pre><code>$ script/lint\n\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file reformatted, 14 files left unchanged.\n</code></pre> <p>That's it! This will lint all <code>*.py</code> files in the repo to ensure they conform to the Black linting guidelines</p> <p>Linting is just the formatting of your code to a certain standard (ie: no trailing whitespaces, \"\" quotes instead of '', etc)</p>"},{"location":"development/#kubernetes","title":"Kubernetes","text":"<p>So far, in these docs we have been using docker-compose to run the bot. This is great for testing and development but it is not ideal for production or testing changes right before deploying to production.</p> <p>Like most containerized applications, Kubernetes is a great option. Kubernetes is what I use personally to deploy this bot. In order to closely mimic the docker-compose setup and the production Kubernetes setup we can use minikube to bridge the two together.</p> <p>Note: docker-compose is still the suggested method for developing locally because it is easier and quicker to test changes. Kubernetes is best suited for testing significant changes right before deploying to production.</p> <p>To build a local Kubernetes cluster you will need to do following:</p> <ul> <li>Install minikube</li> <li>Install kubectl</li> <li>Install docker</li> <li>Edit the <code>script/k8s/errbot/secret.yaml.example</code></li> <li>Rename the file to <code>secret.yaml</code></li> <li>Add your <code>CHAT_SERVICE_TOKEN</code> as a base64 encoded string. You can use <code>python3 script/base64string.py --string &lt;your-string&gt;</code> to generate a base64 encoded string for the k8s secret</li> <li>Optionally set other secrets or credentials you wish to use in this file and then reference them in the <code>script/k8s/errbot/deployment.yaml</code> file <p>\u26a0\ufe0f Never commit this file as it contains secrets</p> </li> </ul> <p>To start a local Kubernetes cluster with minikube, simply run the following command:</p> <pre><code>$ make kube\n</code></pre> <p>This command will do the following:</p> <ul> <li>Start the minikube cluster (if its not already running)</li> <li>Bind Docker to the minikube cluster</li> <li>Build our main errbot image</li> <li>Build our localstack image to mock AWS services (if they are used)</li> <li>Recursively deploy all <code>script/k8s/**</code> manifests to the minikube cluster</li> </ul> <p>Once the <code>make kube</code> command has finished, your bot should be running! \ud83c\udf89</p>"},{"location":"development/#extra-context","title":"Extra Context","text":"<p>We use minikube to test Kubernetes changes locally before deploying them to production for extra confidence. For example, if you want to change the resource limits for your errbot container this is something you should certainly test with minikube first. Being able to validate that it \"works locally\" is a great way to ensure you don't accidentally deploy a broken change to production. For this reason, it is highly suggested to build and test locally with minikube for all/any k8s related changes since testing with docker-compose just won't be sufficient.</p> <p>Minikube won't ever be a perfect replication of what is running in production, but the idea is that it is as close as possible to catch any crazy bugs that otherwise would not be caught when developing quickly with docker-compose.</p>"},{"location":"development/#testing","title":"Testing","text":"<p>It is suggested to write unit tests for your bot in the <code>tests/plugins/</code> directory. I have personally not done a great job at writing tests for my code, but it is pretty straightforward to write your own tests should you wish to do so:</p> <ol> <li>Create a matching file in the <code>tests/plugins/</code> directory - Ex: <code>tests/plugins/test_meow.py</code></li> <li> <p>Add some test coverage:</p> <pre><code>pytest_plugins = [\"errbot.backends.test\"]\n\nextra_plugin_dir = './src/errbot/plugins'\n\ndef test_meow(testbot):\n    testbot.push_message('!meow')\n    assert 'meeeeoowww' in testbot.pop_message()\n</code></pre> </li> <li> <p>Run <code>script/test</code> from the root of the repo to run the test suite</p> </li> <li>That's it! - Obviously a simple example but hopefully you can see how to write your own tests now</li> </ol>"},{"location":"development/#whats-next","title":"What's next?","text":"<p>Continue on to the helper-functions section to about some helpful functions to use in your bot commands to make life easier.</p>"},{"location":"discord-turbo-quickstart/","title":"Discord Turbo Quickstart","text":"<p>This doc is an extremely simplified guide to start your bot and connect it to Discord when testing locally</p> <p>Shortest possible docs for the process:</p> <ol> <li>Clone this repo</li> <li>Rename the <code>creds.env.example</code> file to <code>creds.env</code></li> <li>Add your Discord bot token -&gt; <code>CHAT_SERVICE_TOKEN='&lt;value&gt;'</code></li> <li>Run <code>make run</code> from the terminal</li> <li>Invite your bot to your Discord server</li> <li>\ud83d\ude80</li> </ol>"},{"location":"discord-turbo-quickstart/#whats-next","title":"What's next?","text":"<p>To learn more about developing your bot, adding custom plugins, and more, check out the more in-depth development guide!</p>"},{"location":"helper-functions/","title":"Helper Functions","text":"<p>This guide contains details around a few helper functions that can be used to enhance the functionality of your chatbot functions.</p>"},{"location":"helper-functions/#what-is-a-helper-function","title":"What is a helper function?","text":"<p>A helper function is anything we consider a utility, helper, or shared library that can enhance chat functions. This is code that can be reused in multiple chat functions as well.</p>"},{"location":"helper-functions/#where-are-the-helper-functions-located","title":"Where are the helper functions located?","text":"<p>All helper functions, libraries, and general utilities are stored in the <code>src/errbot/plugins/lib</code> folder.</p> <p>Subdirs:</p> <ul> <li><code>chat</code>: Helper functions specific to chat services such as Discord, Slack, etc.</li> <li><code>common</code>: Common functions that can be used all over the place. Stuff like datetime formatting, logging, hashes, searching, etc</li> <li><code>database</code>: Helper functions for database operations (specifically for DynamoDB)</li> </ul>"},{"location":"helper-functions/#top-helper-functions","title":"Top Helper Functions \u2b50","text":"<p>There are a few helper functions that are super useful for the bot and will be used in most functions. There will be details about these functions below but the rest you will need to dig into the <code>src/errbot/plugins/lib</code> and read the doc strings to understand how they work.</p> <p>Note: All examples below will be using the basic bot command template from the main README.md from this repo</p>"},{"location":"helper-functions/#server-lock","title":"Server Lock","text":"<p>Certain bot commands can and will be locked to servers. Whether for testing, privacy or security reasons you may want to lock certain commands to a specific server.</p> <p>This can be accomplished by using the <code>SERVER_LOCK_ALLOW_LIST='123456789,987654321'</code> environment variable which can be set in the <code>config.env</code> file. First, check out that file to see the comments with more details around the environment variable.</p> <p>To actually use the environement variable in conjunction the lock function and a bot function to \"lock\" you need to add the helper method to a bot command:</p> <pre><code>from errbot import BotPlugin, botcmd\nfrom lib.chat.chatutils import ChatUtils # import the ChatUtils lib\n\nchatutils = ChatUtils() # create a ChatUtils object\n\nclass Hello(BotPlugin):\n    \"\"\"Example 'Hello, world!' plugin for Errbot\"\"\"\n\n    @botcmd\n    def hello(self, msg, args):\n        \"\"\"Return the phrase \"Hello, world!\" in chat\"\"\"\n\n        # check if the command is server locked - True means that it is locked and NOT in the allow list\n        if chatutils.locked(msg, self):\n            # since it is locked, we immediately exit the bot function and do not continue!\n            return\n\n        return \"Hello, world!\"\n</code></pre> <p>The <code>msg</code> variable in <code>def hello(self, msg, args)</code> contains a Discord server id that will be checked against the <code>SERVER_LOCK_ALLOW_LIST</code> environment variable. If <code>chatutils.locked(msg, self)</code> returns True, it means that the lock is enabled and the command is not allowed to be executed. It will automatically return a message like the one below to the user who invoked the command from a server that is not in the allow list:</p> <p></p> <p>If the user invoked the command from a server that is in the allow list, the command will execute normally.</p>"},{"location":"helper-functions/#errhelper","title":"ErrHelper","text":"<p>The ErrHelper library is a very important library in terms of logging and error reporting. If the <code>SENTRY</code> environment variable is configured properly in the <code>creds.env</code> file, then this library is used to send exception reports to Sentry automatically. There is also a few helper functions available in this library that can be very useful in chat functions:</p> <ol> <li>Manually send an exception report to Sentry (ex: after capturing an exception with try/except)</li> <li>Get the current user context for better insights with Sentry (ex: get the user's username, id, etc)</li> </ol> <p>To learn more about the ErrHelper library before looking at the example below, check out the source code: <code>src/errbot/plugins/lib/common/errhelper.py</code></p> <pre><code>from errbot import BotPlugin, botcmd\nfrom lib.common.errhelper import ErrHelper # import the ErrHelper lib\n\nclass Hello(BotPlugin):\n    \"\"\"Example 'Hello, world!' plugin for Errbot\"\"\"\n\n    @botcmd\n    def hello(self, msg, args):\n        \"\"\"Return the phrase \"Hello, world!\" in chat\"\"\"\n        ErrHelper().user(msg) # set the user context (do this right at the top of the function before anything else)\n\n        # optional example demonstrating how to send an exception report to Sentry manually\n        try:\n            # do something that might throw an exception\n            raise Exception(\"This is an example exception\")\n        except Exception as error:\n            # send the exception to Sentry\n            ErrHelper().capture(error)\n\n        return \"Hello, world!\"\n</code></pre> <p>You should add the <code>ErrHelper().user(msg)</code> line to the very top of every single <code>@botcmd</code> function as this provides meaningful context to all exceptions that can/will occur eventually in your function \ud83d\ude04</p>"},{"location":"helper-functions/#whats-next","title":"What's next?","text":"<p>Continue on to the persistence section to learn more about how to have a level of persistence with your bot in the ephemeral container world \ud83d\udcbe</p> <p>Alternatively, continue on to the deployment section to learn more about how to deploy your bot to production \ud83d\ude80</p>"},{"location":"observability/","title":"Observability","text":"<p>This section will describe the observability components that this project uses out of the bot to track things like command usage, central logging, and more.</p>"},{"location":"observability/#tech-stack","title":"Tech Stack","text":"<p>The tech stack used for log collection is as follows:</p> <ul> <li>Promtail</li> <li>Loki</li> <li>Grafana</li> </ul> <p>If you are unfamiliar with how a Grafana stack works I would highly suggest reading up about it because it can be a very powerful tool and all the components used are open-source.</p> <p>A very short description of how this project uses the stack (listed above) is as follows:</p> <ol> <li>Promtail scrapes the logs from the bot and pushes them to a Loki instance</li> <li>Loki aggregates the log streams and tags them</li> <li>Grafana uses Loki as a data source to graph, visualize, and query the logs that the bot generates</li> </ol>"},{"location":"observability/#using-the-log-stack","title":"Using the Log Stack","text":"<p>Since this bot can be built and tested in a variety of ways, the logging tech stack also can be setup in a variety of ways.</p> <p>Here is a description of how the logging tech stack can be setup in the different environments:</p> <ul> <li><code>make local</code>: Uses no logging stack at all</li> <li><code>make run</code>: Starts the bot using docker-compose. Builds the full stack as seperate containers running on the same docker network (see docker-compose section below as the stack components need to be enabled first)</li> <li><code>make kube</code>: Starts the bot in minikube with no logging stack initially. After the minikube cluster has been started, you have two options for starting your logging stack:<ul> <li><code>script/k8s/obervability/setup</code>: Starts the logging stack inside of your minikube cluster (<code>make kube</code> must be run first)</li> <li>Manually apply the <code>script/k8s/obervability/*.yaml.*</code> files to your minikube cluster and make sure to edit them as needed (specifcally the config map file to point to your Loki instance). This option is more complex and allows you to point your minikube cluster to a different Loki instance such as Grafana cloud. In production, the bot ships logs to Grafana cloud (<code>make kube</code> must be run first)</li> </ul> </li> </ul>"},{"location":"observability/#docker-compose","title":"docker-compose","text":"<p>Since the observability stack isn't really useful for average local development it is disabled by default.</p> <p>To enable the logging stack with docker-compose and have it start up with your bot container when using <code>make run</code>, simply go into the <code>docker-compose.yml</code> file and uncomment the <code>obervability</code> section, and the volume section for the main errbot container. You will see in-line comments instructing you which lines to enable. Once you are done, run <code>make run</code> and your whole logging stack will start!</p> <p>Once the docker-compose stack starts, you can navigate to localhost:3000/login to get to your Grafana dashboard</p> <ul> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> </ul> <p>The Loki data source is automatically configured so you can go straight to browsing your bot's logs!</p>"},{"location":"observability/#minikube","title":"minikube","text":"<p>In minikube and in production, we use a daemonset in Kubernetes. This allows us to scrape and collect all logs on the node with promtail and then push them to our defined Loki instance.</p> <p>The observability stack is also disabled by default in minikube but it can be easily enabled with a single command:</p> <pre><code>$ script/k8s/observability/setup\n</code></pre> <p>This will apply all the necessary k8s manifests to your minikube cluster to enable the observability stack.</p> <p>Next, run the command below in a separate terminal window:</p> <pre><code>$ kubectl port-forward --namespace observability service/loki-grafana 3000:80\n</code></pre> <p>Now you can navigate to localhost:3000/login to get to your Grafana dashboard</p> <ul> <li>Username: <code>admin</code></li> <li>Password: <code>&lt;displayed to you in the 'script/k8s/observability/setup' script's output&gt;</code></li> </ul> <p>Note: If you need to get your Grafana password again, you can run <code>kubectl get secret --namespace observability loki-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo</code></p>"},{"location":"observability/#grafana-screenshots","title":"Grafana Screenshots \ud83d\udcf8","text":""},{"location":"persistence/","title":"Persistence","text":"<p>This is a more advanced topic. This article will not fully show you how to setup persistence but rather plant some seeds for how you can do it on your own \ud83c\udf31 (and hopefully help you get there)</p> <p>The very nature of containers is ephemeral and persistence is always a valid question when it comes to containers.</p> <p>For this project I chose to lean pretty hard into AWS DynamoDB to save small bits of state where needed.</p> <p>The bot itself is fairly stateless and all its configuration is baked in via environement variables. However, certain bot commands have statistics tied into them, they can remember things, and have leader boards. In order to retain this data, nosql records are stored in various DynamoDB tables.</p>"},{"location":"persistence/#walkthrough","title":"Walkthrough","text":"<p>This section will walk through an example of a bot commad that has persistence and I will do the best I can to explain how this is stored in DynamoDB:</p> <p>Note: This examples uses a \"top down approach\". You will first \"see\" a chat command being run and then run through all the pieces it interacts with and you will end with the initial table creation via Terraform</p> <ol> <li>A user invokes the <code>.remember</code> command to remember something simple:</li> </ol> <p><code>text    .remember meeting is tomorrow</code></p> <p>This will write a record to DynamoDB with <code>meeting</code> as the key and <code>tomorrow</code> as the value</p> <ol> <li> <p>Here is an example of some code that could write these values to DynamoDB:</p> <p><code>python from lib.database.dynamo_tables import RememberTable dynamo = Dynamo() dynamo.write(     RememberTable(         discord_server_id=guild_id,         rem_key=result[\"key\"],         rem_value=result[\"value\"],     ) )</code></p> </li> <li> <p>Check out the <code>src/errbot/plugins/database/dynamo_tables.py</code> file to see where the structure for tables can be defined</p> </li> <li>Check out the <code>src/errbot/plugins/database/dynamo.py</code> file to see where I implemented a helper class for interacting with DynamoDB (as used above in the snippet)</li> <li>Check out the <code>terraform/aws/dynamoDB_tables.tf</code> file to see how DynamoDB tables are created in AWS via Terraform</li> </ol>"},{"location":"persistence/#testing-persistence-locally","title":"Testing Persistence Locally","text":"<p>The <code>docker-compose.yml</code> files comes with a side car container running <code>localstack</code> which is a growing project that does a good job at \"mocking\" many core AWS services. One of these services is DynamoDB and works quite well for testing locally.</p> <p>When you run <code>make run</code> it automatically launches a <code>localstack</code> container with DynamoDB enabled. When the <code>localstack</code> container starts up, it will run the <code>script\\localstack\\localstack-startup</code> script which will pre-populate many DynamoDB tables for local testing. This is rather helpful because you can test out your persistence features locally to determine if it is worth the effort to setup something like AWS DynamoDB to hold state records for your bot.</p> <p>Note: By using the <code>localstack</code> side car container, you will be able to test out chat commands that need persistence like <code>.remember</code>, <code>.play stats</code>, etc. Whoot!</p>"},{"location":"persistence/#summary","title":"Summary","text":"<p>The main take-aways from this section is that this bot comes with some built in commands that have a level of persistence to them. If you want these command to function properly or if you want to develop your own commands in the future that are stateful, you will need to enable a form of persistence for your bot.</p> <p>I have shown you one method of doing so with AWS DynamoDB but there are many more options so chose what works best for you \ud83d\ude03</p>"},{"location":"setup/","title":"Setup","text":"<p>This guide will walk you through setting up errbot for local development \ud83d\udd28</p>"},{"location":"setup/#project-components","title":"Project Components","text":"<p>Key concepts:</p> <p>There are three main components to errbot:</p> <ul> <li>The chatbot itself - This is <code>errbot</code>, the python app running in a docker container which processes requests - <code>src/errbot/</code></li> <li>The chat-service - This is what you are connecting your chatbot to. This could be Discord, Slack, etc.. I will be using Discord for this guide but Slack is also tested and works fine.</li> <li>The database - This could be literally anything to store state since the nature of containers is ephimeral. For this project I have chosen AWS DynamoDB for state storage. When testing locally I use LocalStack to mock AWS DynamoDB.</li> </ul>"},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>If you got all the items below downloaded and are familiar with setting up a bot account for your chat service (Slack, Discord, etc), you can skip right to the usage section.</p> <ul> <li>Docker</li> <li>Docker-compose</li> <li>Make</li> <li>WSL if you are using Windows</li> <li>Python Dependencies for testing (<code>pip install -r requirements.txt</code>)</li> </ul> <p>Depending on which \"backend\" or \"chat-service\" you plan on using, you will need an authentication token to start your bot.</p> <ul> <li>Slack - Extra errbot documentation</li> <li>Discord - Extra errbot documentation</li> </ul> <p>Lastly, you will need to be familiar with how to add your bot to your chat service.</p> <p>Adding your bot to a chat service examples:</p>"},{"location":"setup/#slack","title":"Slack","text":"<p>In the case of Slack, this can be done by mentioning your bot in any channel and you will be prompted to invite the bot right there.</p> <p>Note, this particular repo leans towards Discord for most things. However, as of this writing, all features of this bot work in Slack as well with the exception of having the bot join a voice channel as that is not a feature of Slack.. yet</p>"},{"location":"setup/#discord","title":"Discord","text":"<p>This bot has already been provisioned to Discord. It is included as a reference should the bot ever need to be rebuilt</p> <p>With Discord, things are a little different. You will need to first enable <code>SERVER MEMBERS INTENT</code> for your bot application. After that, you need to go into the Oauth2 page for your bot and select the <code>bot</code> scope. This will expand more options. You may go as crazy or as restrictive as you want with the chat permissions. That part is totally up to you.</p> <p>Once your permissiosn are scoped out, you will need to copy the oauth2 link that is generated.</p> <p>It could look something like this: <code>https://discord.com/api/oauth2/authorize?client_id=&lt;number&gt;&amp;permissions=&lt;number&gt;&amp;scope=bot</code></p> <p>Note: You can find an example invite link farther below</p> <p>Enter that link into your web browser and it should give you a list of servers to invite your bot to. Add it to your favorite server!</p> <p>To setup your bot, you will need to modify your <code>config.env</code> file. To make things easier, there is a <code>config.example.env</code> file in the root of this repo.</p> <ol> <li>Rename <code>config.example.env</code> to <code>config.env</code> *required</li> <li>Set <code>BACKEND=&lt;backend&gt;</code> *required</li> <li>Set <code>CHAT_SERVICE_TOKEN='&lt;token&gt;'</code> *required</li> <li>Change <code>BOT_PREFIX='!'</code> if you want *optional</li> </ol>"},{"location":"setup/#usage-locally","title":"Usage - Locally","text":"<p>Important: Make sure you followed the setup instructions above first</p> <p>For plugin testing and running the bot locally, you may run the following command to launch a local instance of your bot and interact with it over the command line:</p> <pre><code>$ make local\n[#] Starting local bot test environment\n[#] Killing old docker processes\ndocker-compose rm -fs\nStopping chatbot ... done\nGoing to remove chatbot\nRemoving chatbot ... done\n[#] Building docker containers\ndocker-compose build\nBuilding chatbot\n[+] Building 1.3s (22/22) FINISHED\n...\n..\n.\n[#] TEST Container is now running!\n[#] Interact with me over the CLI prompt below\n...\n..\n.\n[@local_admin \u27a1 @errbot] &gt;&gt;&gt;\n</code></pre> <p>Note: You may notice some errors in your output. This is expected if you do not have all the proper credentials setup in your <code>creds.env</code> file. For example, if you have an API token that is needed for a plugin, and that token is not present in the environment, that plugin will fail to load. All others should load fine and you can test normally.</p> <p>Read more about the errbot local dev environment here</p>"},{"location":"setup/#windows-tips-for-local-usage","title":"Windows Tips for Local Usage","text":"<p>If for some reason you are using Windows and not WSL, you can build a local image using the following commands:</p> <pre><code>$ docker-compose build\n[+] Building 1.3s (22/22) FINISHED\n$ docker run -it --rm --env-file config.env --env-file creds.env -e LOCAL_TESTING=True errbot_chatbot:latest\n</code></pre> <p>This will result in a CLI prompt to <code>errbot</code> locally so you can test. Simply press <code>CTRL+C</code> to exit when you are done</p>"},{"location":"setup/#usage-connected-to-a-chat-service","title":"Usage - Connected to a Chat Service","text":"<p>Completed the simple setup locally? Awesome! Let's start the bot connected to a live chat service:</p> <p>Note: <code>make run</code> will start the bot and attach it to Discord (or another chat service) for usage. If you are looking to start a local instance of the bot, see the <code>Usage - Locally</code> section earlier in this guide</p> <pre><code>$ make run\n[#] Killing old docker processes\ndocker-compose rm -fs\nNo stopped containers\n[#] Building docker containers\ndocker-compose up --build -d\nBuilding chatbot\n[+] Building 1.3s (23/23) FINISHED\nCreating chatbot ... done\n[#] Container is now running!\n</code></pre> <p>Note: for security reasons the <code>creds.env</code> file is not committed to this repo and NEVER should be.</p> <p>If you followed the steps above and everything succeeded, you should get a DM from the bot stating that it is \"Now Online\". You should note that you will only get this message if <code>BOT_ADMINS='@username'</code> is set to your username in the <code>config.env</code> file.</p> <p>Note x2: Running <code>make run</code> will start the <code>errbot-dev</code> bot and can be invoked with <code>!</code> rather than the usual <code>.</code>. You can tweak this however you like with the <code>BOT_PREFIX</code> env var</p> <p>That's it for the setup! If you followed the instructions above, your Docker container should start and most plugins should load correctly. Certain plugins like the <code>league</code> plugin require an API key so those will fail until that environment variable is provided but this is expected. All this and more will be covered in the next section!</p>"},{"location":"setup/#whats-next","title":"What's next?","text":"<p>Continue on to the configuration section to learn how you can configure your bot to your preferences before you start development.</p>"},{"location":"skaffold/","title":"Skaffold","text":"<p>Running the project with skaffold</p>"},{"location":"skaffold/#prerequisites","title":"Prerequisites","text":"<p>Before you can get going with <code>skaffold</code> you need to edit one file first to add your bot token</p> <ol> <li>Obtain a bot token from your chat service (Discord, Slack, etc)</li> <li> <p><code>base64</code> encode the token so it can be saved as a k8s secret</p> <pre><code>python3 script/base64string.py --string supersecretvalue\n</code></pre> </li> <li> <p>From the root of this repo, edit the following file: <code>script/k8s/errbot/secret.yaml.example</code></p> <ul> <li>Add your base64 encoded bot token to the file like so: <code>CHAT_SERVICE_TOKEN: \"base64encodedvaluehere==\"</code></li> <li>Rename the file to <code>secret.yaml</code></li> <li>\u26a0\ufe0f Ensure you don't commit this file as it has your secret token!</li> </ul> </li> </ol>"},{"location":"skaffold/#steps","title":"Steps","text":"<ol> <li> <p>Start your minikube cluster, configure skaffold, and set your Docker context:</p> <pre><code>minikube start --profile custom\n\nskaffold config set --global local-cluster true\n\neval $(minikube -p custom docker-env)\n</code></pre> </li> <li> <p>Start your cluster with skaffold:</p> <pre><code>skaffold dev\n</code></pre> <p>Optionally, run <code>skaffold dev --tail=true</code> to attach to your running containers to view log output while they run</p> </li> </ol>"},{"location":"skaffold/#minikube-dashboard","title":"Minikube Dashboard","text":"<p>The first thing you may want to do is connect to your minikube instance via the dashboard UI.</p> <p>Enable the k8s dashboard by running the following command in a seperate terminal window:</p> <pre><code>minikube dashboard --profile custom\n</code></pre>"},{"location":"skaffold/#grafana","title":"Grafana","text":"<p>Now that your cluster is up and running, you can get to your Grafana instance for metrics, logs, etc by doing the following:</p> <ol> <li>Open a new terminal window</li> <li> <p>Obtain your Grafana password (the username will be <code>admin</code>):</p> <pre><code>kubectl get secret --namespace observability grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n</code></pre> </li> <li> <p>Port forward to your grafana instance:</p> <pre><code>kubectl port-forward --namespace observability service/grafana 3000:80\n</code></pre> <p>If your IDE does not automatically direct you, simply go to http://127.0.0.1:3000/login after port forwarding with <code>kubectl</code></p> </li> <li> <p>Sign in with the credentials obtained in step two and navigate to the explore tab in Grafana</p> </li> <li> <p>Run a query like the one below to view your <code>errbot</code> container logs in real time!</p> <p></p> </li> </ol>"},{"location":"slack/","title":"Slack","text":"<p>The main errbot chatbot framework supports many different backends. Since this is a modified version of that framework, certain features work a little differently. Especially since it has been bundled as a Docker container for ease of deployments.</p> <p>To date I have not tested any other backends besides Discord and Slack. The good news is that both of these backends are supported with this version of errbot.</p> <p>There are slight differences between the two services so certain features will not work. For example, if you ask the bot to join a voice channel via the Discord backend it will work. However, Slack does not have voice channels at this time of writting so that feature will not work.</p>"},{"location":"slack/#enabling-the-slack-backend","title":"Enabling the Slack Backend","text":"<p>Backends and their configurion are setup mostly with environment variables. The steps below will walk you through what needs to be done to setup your bot to use Slack instead of Discord.</p> <ol> <li>Follow the official errbot docs to create a Slack bot and the corresponding token (save this token for the next step)</li> <li>Paste the token you get from Slack into your <code>creds.env</code> file</li> </ol> <pre><code>CHAT_SERVICE_TOKEN='xoxb-token-here' # Slack\n</code></pre> <ol> <li>Edit the <code>config.env</code> file to set your backend to Slack</li> </ol> <pre><code>BACKEND='Discord'\n</code></pre> <ol> <li>Edit the <code>config.env</code> file to set the bot admin(s)</li> </ol> <pre><code>BOT_ADMINS='@grant.birkinbine' # Slack example (your true Slack username)\n</code></pre> <ol> <li>Disable the following lines as you will not be using the Discord backend and Slack does not support an option for a \"bot status\"</li> </ol> <pre><code># BOT_EXTRA_BACKEND_DIR='/app/backend/err-backend-discord'\n# BOT_STATUS_MESSAGE='errbot | .help'\n</code></pre> <ol> <li>Lastly, edit the <code>src/errbot/requirements.txt</code> file to enable Slack related pip packages. Look for the line that is a comment related to Slack and simply uncomment all the lines (packages) below it</li> </ol> <pre><code># errbot[slack] # Uncomment all the lines below this one to enable Slack support\n...\n..\n.\n</code></pre> <ol> <li>\ud83c\udf89</li> </ol> <p>Now when you start your bot with <code>make run</code> it will automatically connect to Slack and use that as its backend</p>"},{"location":"policies/","title":"About","text":"<p>Adding a privacy policy and a terms of service because Discord is making me to be a verified bot.. :\\</p>"},{"location":"policies/privacy-policy/","title":"Privacy policy","text":"<p>Privacy Policy of errbot</p> <p>This page is used to inform errbot users regarding our policies with the collection, use, and disclosure of Personal Information if anyone decided to use our Service, errbot</p> <p>If you choose to use our Service, then you agree to the collection and use of information in relation with this policy. The Personal Information that we collect are used for providing and improving the Service. We will not use or share your information with anyone except as described in this Privacy Policy. Our Privacy Policy was created with the help of the Privacy Policy Template Generator.</p> <p>The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which is accessible at errbot.birki.io, unless otherwise defined in this Privacy Policy.</p> <p>Information Collection and Use For a better experience while using our Service, we may require you to provide us with certain personally identifiable information, including but not limited to Discord handle, chat messages sent to errbot, Discord server id. The information that we collect will be used to contact or identify you.</p> <p>Log Data We want to inform you that whenever you use errbot, we collect information that you send to errbot that is called Log Data. This Log Data may include information such as the commands you use and other statistics.</p> <p>Service Providers We may employ third-party companies and individuals due to the following reasons:</p> <p>To facilitate our Service; To provide the Service on our behalf; To perform Service-related services; or To assist us in analyzing how our Service is used. We want to inform our Service users that these third parties have access to your Personal Information. The reason is to perform the tasks assigned to them on our behalf. However, they are obligated not to disclose or use the information for any other purpose.</p> <p>Security We value your trust in providing us your Personal Information, thus we are striving to use commercially acceptable means of protecting it. But remember that no method of transmission over the internet, or method of electronic storage is 100% secure and reliable, and we cannot guarantee its absolute security.</p> <p>Links to Other Sites Our Service may contain links to other sites. If you click on a third-party link, you will be directed to that site. Note that these external sites are not operated by us. Therefore, we strongly advise you to review the Privacy Policy of these websites. We have no control over, and assume no responsibility for the content, privacy policies, or practices of any third-party sites or services.</p> <p>Changes to This Privacy Policy We may update our Privacy Policy from time to time. Thus, we advise you to review this page periodically for any changes. We will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately, after they are posted on this page.</p> <p>Contact Us If you have any questions or suggestions about our Privacy Policy, do not hesitate to contact us.</p>"},{"location":"policies/terms-of-service/","title":"Terms of service","text":"<p>Errbot - Terms of Service Please read these terms of service (\"terms\", \"terms of service\") carefully before using errbot (the \"service\") operated by errbot developers (\"us\", 'we\", \"our\").</p> <p>Conditions of Use</p> <p>We will provide their services to you, which are subject to the conditions stated below in this document. Every time you use the service, you accept the following conditions. This is why we urge you to read them carefully.</p> <p>Privacy Policy</p> <p>Before you continue using our website we advise you to read our privacy policy privacy-policy regarding our user data collection. It will help you better understand our practices.</p> <p>Applicable Law</p> <p>By using this service, you agree that the laws of the United States, without regard to principles of conflict laws, will govern these terms of service, or any dispute.</p> <p>Disputes</p> <p>Any dispute related in any way to your use of this service shall be arbitrated by state or federal court in the United States and you consent to exclusive jurisdiction and venue of such courts.</p> <p>Comments, Reviews, and Emails</p> <p>Users may use the service as long as their content is not obscene, illegal, defamatory, threatening, infringing of intellectual property rights, invasive of privacy or injurious in any other way to third parties. Content has to be free of software viruses, political campaign, and commercial solicitation.</p> <p>We reserve all rights (but not the obligation) to remove and/or edit such content. When you post your content, you grant errbot non-exclusive, royalty-free and irrevocable right to use, reproduce, publish, modify such content throughout the world in any media.</p> <p>User Account and Service Usage</p> <p>We reserve all rights to revoke access, edit or remove content in their sole discretion.</p>"}]}